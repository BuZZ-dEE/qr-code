/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AnimationPreset, QRCodeAnimation } from "./components/qr-code/animations";
export { AnimationPreset, QRCodeAnimation } from "./components/qr-code/animations";
export namespace Components {
    interface QrCode {
        "animateQRCode": (animation?: AnimationPreset | QRCodeAnimation) => Promise<void>;
        "contents": string;
        "getModuleCount": () => Promise<number>;
        "maskXToYRatio": number;
        "moduleColor": string;
        "positionCenterColor": string;
        "positionRingColor": string;
        "protocol": string;
        "squares": boolean;
    }
}
export interface QrCodeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLQrCodeElement;
}
declare global {
    interface HTMLQrCodeElementEventMap {
        "codeRendered": any;
    }
    interface HTMLQrCodeElement extends Components.QrCode, HTMLStencilElement {
        addEventListener<K extends keyof HTMLQrCodeElementEventMap>(type: K, listener: (this: HTMLQrCodeElement, ev: QrCodeCustomEvent<HTMLQrCodeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLQrCodeElementEventMap>(type: K, listener: (this: HTMLQrCodeElement, ev: QrCodeCustomEvent<HTMLQrCodeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLQrCodeElement: {
        prototype: HTMLQrCodeElement;
        new (): HTMLQrCodeElement;
    };
    interface HTMLElementTagNameMap {
        "qr-code": HTMLQrCodeElement;
    }
}
declare namespace LocalJSX {
    interface QrCode {
        "contents"?: string;
        "maskXToYRatio"?: number;
        "moduleColor"?: string;
        "onCodeRendered"?: (event: QrCodeCustomEvent<any>) => void;
        "positionCenterColor"?: string;
        "positionRingColor"?: string;
        "protocol"?: string;
        "squares"?: boolean;
    }
    interface IntrinsicElements {
        "qr-code": QrCode;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "qr-code": LocalJSX.QrCode & JSXBase.HTMLAttributes<HTMLQrCodeElement>;
        }
    }
}
